******************************************************
AULA 01 SETUP E CONFIGURACAO DO SWAGGER
*******************************************************

       Problemas com VIsual Studio precisou ser instalado o update 
	   Ficou com a vesao mais atual 
	   
	   
	   Removido pastas Migration, Views, Models , Arquivo de Controller, wwwroot 
	   No package.json retiramos a string de Conexao 
	   Na classe Data mudamos para o ome DataContext 
	   Fizemos a configuracao Abaixo 
	   public void ConfigureServices(IServiceCollection services)
        {
  
            services.AddDbContext<DataContext>(options =>
                options.UseSqlServer(
                    Configuration.GetConnectionString("DefaultConnection")));
            services.AddDefaultIdentity<IdentityUser>()
                .AddEntityFrameworkStores<DataContext>();

            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
               
            }
            else
            {
                
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseStaticFiles();
           

            

            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller=Home}/{action=Index}/{id?}");
            });
        }

INSTALANDO O SWAGGER 
dotnet add package Swashbuckle.AspNetCore --version 5.4.1
Criou uma class de options e definiu a configuracao dentro do swagger 

Startup Configure 
 var swaggerOptions = new SwaggerOptions();
 Configuration.GetSection(nameof(SwaggerOptions)).Bind(swaggerOptions);

app.UseSwagger(options=> { options.RouteTemplate = swaggerOptions.JsonRoute;});

            app.UseSwaggerUI(options=> {
                options.SwaggerEndpoint(swaggerOptions.UIEndpoint,swaggerOptions.Description);
                });

Startup ConfigureServices 
services.AddSwaggerGen(options =>
                options.SwaggerDoc("v1", new OpenApiInfo(){Title="TweetBook API",Version="v1"})
            );


******************************************************
AULA 02 CONCEITO DE VERSIONAMENTO CRIAR PASTAS 
*******************************************************
Criado pasta Contracts -> V1 ->  APiRoute
Criado pasta Controllers -> v1 -> Dentro dos metodos fazer referencia as constantes da classe route


******************************************************
AULA 03 MELHORIA NO PROCESSO DE CONFIGURAR OS SERVICOS 
*******************************************************
NAO ENTENDO AINDA QUANDO TEM NO STARTUP DOIS METODOS 
// This method gets called by the runtime. Use this method to add services to the container.
ConfigureServices
Esse Metodo define a sequencia de processamento do pipeline http 
Configure(IApplicationBuilder app, IHostingEnvironment env)

Criado interface IInstaller e dividiu os metodos para implementaco do mesmo  

Criado por reflection descobrir as classes e instacialas 
var classesImplementingIInstaler = typeof(Startup).Assembly.ExportedTypes.Where(o => 
typeof(IInstaller).IsAssignableFrom(o) && !o.IsInterface && !o.IsAbstract).Select(Activator.CreateInstance).Cast<IInstaller>().ToList();


******************************************************
AULA 04 OPERACAO POST
*******************************************************
Uso de location na devolutiva do JSON
 private string GetUriLocationNewItem(string id)
        {
           var baseUrl = $"{HttpContext.Request.Scheme}://{HttpContext.Request.Host.ToUriComponent()}";
           return baseUrl + ApiRoutes.Posts.Get.Replace("{Id}",id);    
        }
  return Created(GetUriLocationNewItem(newId),new PostResponse(){Id = post.Id});

******************************************************
AULA 05 OPERACAO GET
*******************************************************
Uso de Conceito de Servicos e Como instanciar o servico dentro do ASP.NET CORE 
Dentro do ConfigureServices ou MvcInstaller 
services.AddSingleton<IPostService,PostService>();

*********************************************************
AULA 05 e  06 UPDATE E DELETE
************************************************************
definicoes de route e montagem de parametros na controller 

Uso de NoContent ao Excluir registros 
[HttpPut(ApiRoutes.Posts.Update)]
        public IActionResult Update([FromRoute] Guid Id, [FromBody] UpdatePostRequest post)
        {
            var entity = new Post();
            entity.Id = Id;
            entity.Name = post.Name;
            
            if (_service.UpdatePost(entity))
                return Ok();

            return NotFound();

        }

        [HttpDelete(ApiRoutes.Posts.Delete)]
        public IActionResult Delete([FromRoute] Guid Id)
        {
            if (_service.DeletePost(Id))
                return NoContent();

            return NotFound();
        }


************************************************************
AULA 07 ENTITY FRAMEWORK - 
************************************************************

AULA DE ENTITY FRAMEWORK
PARA RODAR COM ASP.NET 2.2.0 TER QUER SER ESPECIFICA
USO DO SQL LITE
dotnet add package Microsoft.EntityFrameworkCore.Sqlite --version 2.2.6

http://www.macoratti.net/17/04/efcore_sqlite1.htm
Dicas para uso Entity Framework 

  public class DataContext : IdentityDbContext
    {
        public DataContext(DbContextOptions<DataContext> options)
            : base(options)
        {
        }

        public DbSet<Post> Posts {get;set;}
    }

var connection = configuration["ConnectionDB:SqliteConnectionString"]; 
           services.AddDbContext<DataContext>(options =>
                options.UseSqlite(connection));
            services.AddDefaultIdentity<IdentityUser>()
                .AddEntityFrameworkStores<DataContext>();

PARA RODAR O MIGRATION 
MONTAR A MIGRACAO 
dotnet ef migrations add "Create Posts"
RODAR A MIGRACAO NO BANCO DE DADOS 
INTERESSANTE QUE MONTOU A PARTE DO ASP.NET IDENTITY 
dotnet ef database update

 dotnet ef database update 
info: Microsoft.EntityFrameworkCore.Infrastructure[10403]
      Entity Framework Core 2.2.6-servicing-10079 initialized 'DataContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: None
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (13ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      PRAGMA foreign_keys=ON;
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      PRAGMA foreign_keys=ON;
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*) FROM "sqlite_master" WHERE "name" = '__EFMigrationsHistory' AND "type" = 'table';
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      PRAGMA foreign_keys=ON;
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      PRAGMA foreign_keys=ON;
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (91ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE TABLE "__EFMigrationsHistory" (
          "MigrationId" TEXT NOT NULL CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY,
          "ProductVersion" TEXT NOT NULL
      );
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      PRAGMA foreign_keys=ON;
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      PRAGMA foreign_keys=ON;
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*) FROM "sqlite_master" WHERE "name" = '__EFMigrationsHistory' AND "type" = 'table';
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      PRAGMA foreign_keys=ON;
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT "MigrationId", "ProductVersion"
      FROM "__EFMigrationsHistory"
      ORDER BY "MigrationId";
Applying migration '20200522061054_Create Posts'.
info: Microsoft.EntityFrameworkCore.Migrations[20402]
      Applying migration '20200522061054_Create Posts'.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      PRAGMA foreign_keys=ON;
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE TABLE "AspNetRoles" (
          "Id" TEXT NOT NULL CONSTRAINT "PK_AspNetRoles" PRIMARY KEY,
          "Name" TEXT NULL,
          "NormalizedName" TEXT NULL,
          "ConcurrencyStamp" TEXT NULL
      );
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE TABLE "AspNetUsers" (
          "Id" TEXT NOT NULL CONSTRAINT "PK_AspNetUsers" PRIMARY KEY,
          "UserName" TEXT NULL,
          "NormalizedUserName" TEXT NULL,
          "Email" TEXT NULL,
          "NormalizedEmail" TEXT NULL,
          "EmailConfirmed" INTEGER NOT NULL,
          "PasswordHash" TEXT NULL,
          "SecurityStamp" TEXT NULL,
          "ConcurrencyStamp" TEXT NULL,
          "PhoneNumber" TEXT NULL,
          "PhoneNumberConfirmed" INTEGER NOT NULL,
          "TwoFactorEnabled" INTEGER NOT NULL,
          "LockoutEnd" TEXT NULL,
          "LockoutEnabled" INTEGER NOT NULL,
          "AccessFailedCount" INTEGER NOT NULL
      );
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE TABLE "Posts" (
          "Id" BLOB NOT NULL CONSTRAINT "PK_Posts" PRIMARY KEY,
          "Name" TEXT NULL
      );
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE TABLE "AspNetRoleClaims" (
          "Id" INTEGER NOT NULL CONSTRAINT "PK_AspNetRoleClaims" PRIMARY KEY AUTOINCREMENT,
          "RoleId" TEXT NOT NULL,
          "ClaimType" TEXT NULL,
          "ClaimValue" TEXT NULL,
          CONSTRAINT "FK_AspNetRoleClaims_AspNetRoles_RoleId" FOREIGN KEY ("RoleId") REFERENCES "AspNetRoles" ("Id") ON DELETE CASCADE
      );
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE TABLE "AspNetUserClaims" (
          "Id" INTEGER NOT NULL CONSTRAINT "PK_AspNetUserClaims" PRIMARY KEY AUTOINCREMENT,
          "UserId" TEXT NOT NULL,
          "ClaimType" TEXT NULL,
          "ClaimValue" TEXT NULL,
          CONSTRAINT "FK_AspNetUserClaims_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "AspNetUsers" ("Id") ON DELETE CASCADE
      );
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE TABLE "AspNetUserLogins" (
          "LoginProvider" TEXT NOT NULL,
          "ProviderKey" TEXT NOT NULL,
          "ProviderDisplayName" TEXT NULL,
          "UserId" TEXT NOT NULL,
          CONSTRAINT "PK_AspNetUserLogins" PRIMARY KEY ("LoginProvider", "ProviderKey"),
          CONSTRAINT "FK_AspNetUserLogins_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "AspNetUsers" ("Id") ON DELETE CASCADE
      );
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE TABLE "AspNetUserRoles" (
          "UserId" TEXT NOT NULL,
          "RoleId" TEXT NOT NULL,
          CONSTRAINT "PK_AspNetUserRoles" PRIMARY KEY ("UserId", "RoleId"),
          CONSTRAINT "FK_AspNetUserRoles_AspNetRoles_RoleId" FOREIGN KEY ("RoleId") REFERENCES "AspNetRoles" ("Id") ON DELETE CASCADE,
          CONSTRAINT "FK_AspNetUserRoles_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "AspNetUsers" ("Id") ON DELETE CASCADE
      );
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE TABLE "AspNetUserTokens" (
          "UserId" TEXT NOT NULL,
          "LoginProvider" TEXT NOT NULL,
          "Name" TEXT NOT NULL,
          "Value" TEXT NULL,
          CONSTRAINT "PK_AspNetUserTokens" PRIMARY KEY ("UserId", "LoginProvider", "Name"),
          CONSTRAINT "FK_AspNetUserTokens_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "AspNetUsers" ("Id") ON DELETE CASCADE
      );
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE INDEX "IX_AspNetRoleClaims_RoleId" ON "AspNetRoleClaims" ("RoleId");
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE UNIQUE INDEX "RoleNameIndex" ON "AspNetRoles" ("NormalizedName");
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE INDEX "IX_AspNetUserClaims_UserId" ON "AspNetUserClaims" ("UserId");
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE INDEX "IX_AspNetUserLogins_UserId" ON "AspNetUserLogins" ("UserId");
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE INDEX "IX_AspNetUserRoles_RoleId" ON "AspNetUserRoles" ("RoleId");
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE INDEX "EmailIndex" ON "AspNetUsers" ("NormalizedEmail");
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE UNIQUE INDEX "UserNameIndex" ON "AspNetUsers" ("NormalizedUserName");
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
      VALUES ('20200522061054_Create Posts', '2.2.6-servicing-10079');
Done.
$ 

************************************************************
AULA 09 CONFIGURACAO DE AUTENTICACAO DO JWT SETTINGS E SWAGGER 
************************************************************

OCORREU A CONFIGURACO DO JWT SETTINGS 
No app Settings 
"JwtSettingsOptions":
  {
    "Secret":"12345678901234567890123456789012"
  },

public class JwtSettingsOptions
    {
        public string Secret { get; set; }
    }

var jwtOptions = new JwtSettingsOptions();
            configuration.GetSection(nameof(JwtSettingsOptions)).Bind(jwtOptions);
            services.AddSingleton(jwtOptions);

            var tokenParameters = new TokenValidationParameters()
            {
                ValidateIssuerSigningKey = true,
                IssuerSigningKey = new SymmetricSecurityKey(System.Text.Encoding.ASCII.GetBytes(jwtOptions.Secret)),
                ValidateIssuer = false,
                ValidateAudience =false,
                RequireExpirationTime = false,
                ValidateLifetime = true

            };

            services.AddAuthentication(x =>
            {
                x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                x.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
                x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(x =>
            {
                x.SaveToken = true;
                x.TokenValidationParameters = tokenParameters;
            });


OCORREU A CONFIGURACAO DO SWAGGER PARA USAR A AUTORIZATION 
https://github.com/domaindrivendev/Swashbuckle.AspNetCore/issues/1425

services.AddSwaggerGen(x =>
            {
                x.SwaggerDoc("v1", new OpenApiInfo(){Title="TweetBook API",Version="v1"});
                x.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
                {
                    Description = "JWT Authorization header using the Bearer Schema",
                    Name = "Authorization",
                    In = ParameterLocation.Header ,
                    Type = SecuritySchemeType.ApiKey
                });
                x.AddSecurityRequirement(new OpenApiSecurityRequirement
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type = ReferenceType.SecurityScheme,
                                Id = "Bearer"
                            }
                        }, new List<string>()
                    }
                });
            });


OCORREU A CONFIGURACAO DO USE AUTENTICATION

app.UseHttpsRedirection();
            app.UseStaticFiles();
-Colocar caracteristica que comecara a autenticar            
            app.UseAuthentication();

************************************************************
AULA 10 PROCEDIMENTOS REGISTRER IDENTITY E CRIACAO DE TOKEN 
************************************************************
 public async Task<IActionResult> Register([FromBody] UserRegistrationRequest request)
        {
            var authResponse = await _service.RegisterAsync(request.Email,request.Password);
            
            if (!authResponse.Success)
            return BadRequest(new AuthFailedResponse{Errors = authResponse.Errors});

            return Ok(new AuthSuccessResponse{ Token= authResponse.Token});
        }

 public async Task<AuthenticationResult> RegisterAsync(string email, string password)
        {
            var result = new AuthenticationResult();
            
            var userExists =  await _userManager.FindByEmailAsync(email);
            
            if (userExists!= null)
            {
               result.Errors = new List<string>() { "Usuário já existe" };     
               return result;
            }
            
            var newUser =  new IdentityUser()
            {
                UserName =email, 
                Email = email
            };

            var resultnewUser = await _userManager.CreateAsync(newUser, password);

            if (!resultnewUser.Succeeded)
            {
                result.Errors = resultnewUser.Errors.Select(x=> x.Description).ToList();
                return result;
            }
            result.Token = GenerateToken(newUser);
            result.Success = resultnewUser.Succeeded;
            return result;
        }

----------GERACAO DE TOJEN JWT 
private string GenerateToken(IdentityUser user)
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_jwtOptions.Secret);
            var tokenDescriptor = new SecurityTokenDescriptor()
            {
                Subject = new ClaimsIdentity( new[]
                    {
                      new Claim(JwtRegisteredClaimNames.Sub,user.Email),
                      new Claim(JwtRegisteredClaimNames.Jti,Guid.NewGuid().ToString()),      
                      new Claim(JwtRegisteredClaimNames.Email,user.Email),
                      new Claim("id",user.Id)                        
                    }
                ),
                Expires = DateTime.UtcNow.AddHours(6),
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key),SecurityAlgorithms.HmacSha256Signature)
            }; 
            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
            
        }


*********************************************************************
Tratativas para rodar o SQL LITE no linux 
**********************************************************************
Instalando a extensao no VSCODE 
Tive que fazer a instalacao do sqllite3 
sudo apt install sqlite
 
tiver que verificar esse site https://www.sqlite.org/download.html
tive que verificar essa extensao https://marketplace.visualstudio.com/items?itemName=alexcvzz.vscode-sqlite
